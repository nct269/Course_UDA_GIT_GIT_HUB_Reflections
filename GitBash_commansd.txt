To configure git bash copy the thwo files in the gitbash home directory: git-completion.bash, git-prompt.sh
and create or copy paste the content of the file .bash_profile. It's in lesson 1 at the end for mac.

ls -a : to see hidden files

Commit commands:
git init, git add, git status (to see which file has been modified), git commit,

git log

git log --graph -10

git remote (to see the remotes of the project); git remote -v (for verbose, gives more informations); git remote add name_XYZ URL (can be ssh if arametrized) 

git push remote_name branch_X (git looks at the most recent commit from branch_X and follow the reachable commits until it finds one it already has, to push only what is required)

git diff (compares the working dirctory to the staging area)

git diff --staged (compares the staging area to the last commit)
	- This can be a good check before to commit

git Id1 Id2 (compares the two commits with Id1 and Id2)

git checkout XYZ (XYZ is the brnach's name)	- To set the XYZ branch as head

git branch
	- To see the existing branches, as well as the checked out one

git branch XYZ
	- To create the XYZ branch (it does not check it out)

git checkout -b XYZ
	- To turn a commit into a branch (used to turn unreachble commit into a branch)
	- Equivalent to two commands (git branch XYZ & git checkout)

git show Id1
	- Shows the difference between a commit and its parents

git branch -d XYZ
	- Does not delete the commits, just the branch label
	- To do when the branch has been merged
	- Rem: if the branch is deleted before the merge, then it turns the commits into unreachable ones.

git fecth origin/master (remote/branch) or git fetch origin (remote) to get the commit history without merging it.

git fetch should be flowed by git git merge. If auto merge can't be done, then go in the file to see the three versions.

git merge Id2 Id1 (git merge master origin/master)
	- Merge from Id2 in Id1, you work on Id1

Rem: git pull is equivalent to the two commands git fetch and git merge

git log -n1


A branch has a name with its remote, if nothing then it's local.
E.g. you can refer to the master from the origin remote by calling origin/master (remote/branch).
The state checked for origin/master is the one imported from the last fetch.


Git concepts:
working repository
staging area
not committed changes have no id yet
Checked out branch is the "active branch"
head is the current commit
master is the default commit created
remote is the remote directories from where the code is origined (if code is created locally and then pushed, then an origin remote is  created by default)

When one creates a non reachable commit, i.e. not reachable by any branches, then it won't appear in the log and it won't impact the branches neither

When merging two branhces all commit will appears in the log

rem when deleting a branche name one mainly make the commits in this branch unreachable

If one wants to make the new merged branch XYZ and master to be the tip of the (e.g.) master branch, then it is called merging XYZ into master.

Important: git merge creates a new commit

When resolving conflicts in course of a merge operation, the conflictual file opens, there are three sections the current branch code, the original code, the other branch code. Sort out the problem, check with status the changes, add the file(s), commit.

Fast forwrd merge:
The branch you are merging into is an ancestor of the branch that you are merging from. Then the branch you are merging into is just sent forward to the last commit of branch that you are merging from.

Git pull reqest:
Workflow to integrate changes to a master branch
Create a new local branch, push it on the remote and create a pull request.
If the code is compatible then github tells you, otherwise asked for conflict solving.

A note about git merge:

git merge will also include the currently checked-out branch in the merged version. So if you have branch1 checked out, and you run git merge branch2 branch3, the merged version will combine branch1 as well as branch2 and branch3. That’s because the branch1 label will update after you make the merge commit, so it’s unlikely that you didn’t want the changes from branch1 included in the merge. For this reason, you should always checkout one of the two branches you’re planning on merging before doing the merge. Which one you should check out depends on which branch label you want to point to the new commit.

Since the checked-out branch is always included in the merge, you may have guessed that when you are merging two branches, you don't need to specify both of them as arguments to git merge on the command line. If you want to merge branch2 into branch1, you can simply git checkout branch1 and then type git merge branch2. The only reason to type git merge branch1 branch2 is if it helps you keep better mental track of which branches you are merging.

Also, since the two branches are merged, the order in which they are typed into the command line does not matter. The key is to remember that git merge always merges all the specified branches into the currently checked out branch, creating a new commit for that branch.
Merge conflict

If you get a message like this

Auto-merging game.js
CONFLICT (content): Merge conflict in game.js
Automatic merge failed; fix conflicts and then commit the result.

then your files were not in the same state as Caroline's when you started the merge. To fix this, complete the following steps:

    Restore your files to their state before you started the merge by running git merge --abort
    Double check the state of your files. If you run git log while the master branch is checked out, you should see Caroline's "Add color" commit as the second-most-recent, and the most recent should be your commit fixing the bullet bug. If you use git diff to compare your commit to Caroline's, your commit should introduce the line this.delayBeforeBullet = 10; on line 424. The line should be indented to the same level as the line below it using only spaces (no tabs), and the line should have no spaces after it.
    Once your file is in the correct state, create a new commit with your changes.
    Try the merge again.
